heat_template_version: 2015-10-15
description: One VM instance

parameters:

    name:
        type: string
        label: Name of the VM

    router:
        type: string
        label: Name of the Router    

    server:
        type: string
        label: Name of the Server

    network:
        type: string
        label: Name of the Network

    subnet:
        type: string
        label: Name of the Subnet

    key_pair:
        type: string
        label: Key Pair
        constraints:
            - custom_constraint: nova.keypair

    # key_pair:
    #     type: string
    #     label: Key Pair
    #     constraints:
    #         - custom_constraint: nova.keypair            

    # flavor:
    #     type: string
    #     label: Flavor
    #     constraints:
    #         - custom_constraint: nova.flavor

    # image:
    #     type: string
    #     label: Image Name
    #     constraints:
    #         - custom_constraint: glance.image

    # network:
    #     type: string
    #     label: Network
    #     constraints:
    #         - custom_constraint: neutron.network

    # zone:
    #     type: string
    #     label: Availability Zone
    #     default: Default

    # security_groups:
    #     type: comma_delimited_list
    #     label: Security Group(s)
    #     default: default

    # public_network:
    #     type: string
    #     label: Public network name or ID
    #     description: Public network with floating IP addresses.
    #     default: public-net

#networks:

    # public_network:
    #     type: string
    #     label: Public network name or ID
    #     description: Public network with floating IP addresses.
    #     default: public-net
    #     networks: [{subnet: {get_resource: CC_Subnet}, floating_ip: String, port_extra_properties: {mac_address: String, admin_state_up: Boolean, qos_policy: String, value_specs: {...}, port_security_enabled: Boolean, allowed_address_pairs: [{ip_address: String, mac_address: String}, {ip_address: String, mac_address: String}, ...], binding:vnic_type: String}, fixed_ip: String, network: String, port: String, allocate_network: String, uuid: String}]


resources:

    CC_Security:
        type: OS::Neutron::SecurityGroup
        properties:
            name: CC_Security
            rules: [ {
                protocol: icmp,
                protocol: tcp,
                port_range_min: 22,
                port_range_max: 22},
                {protocol: icmp,
                protocol: tcp,
                port_range_min: 80,
                port_range_max: 80}]

    CC_Network : 
        type : OS::Neutron::Net
        properties : 
            name : { get_param: network }

    CC_Subnet:
        type: OS::Neutron::Subnet
        properties:
            name: { get_param: subnet }
            network: { get_resource: CC_Network }
            cidr: 10.12.2.0/24
            allocation_pools: 
                - start: 10.12.2.2
                  end: 10.12.2.254

      
    CC_Router:
        type: OS::Neutron::Router
        properties:
            name: { get_param: router }
            external_gateway_info: { network: private }
                

    CC_Router-interface:
        type: OS::Neutron::RouterInterface
        properties:
            router_id: { get_resource: CC_Router }
            subnet: { get_resource: CC_Subnet }

    CC_Port:
        type: OS::Neutron::Port
        properties:
            network: { get_resource: CC_Network }
            name:
                str_replace:
                    template: port-VM_NAME
                    params:
                        VM_NAME: { get_param: name }
            security_groups: {get_resource: CC_Security}


    CC_Floating_ip:
        type: OS::Neutron::FloatingIP
        properties:
            floating_network: { get_resource: CC_Network }


    CC_Floating_ip_assoc:
        type: OS::Neutron::FloatingIPAssociation
        properties:
            floatingip_id: { get_resource: CC_Floating_ip }
            port_id: { get_resource: CC_Port }
    
    CC_Frontend:
        type: serverTemplate.yaml
        properties:
            key_pair: { get_param: key_pair }
            flavor: Cloud Computing
            availability_zone: Cloud Computing 2017
            image: ubuntu-16.04
            name: {get_param : server}
            #networks: [subnet: {get_resource: CC_Subnet}, floating_ip: {get_resource: CC_Floating_ip}, network: {get_resource: CC_Network}, port: {get_resource: CC_Port}]
            network: {get_param: network}
            security_groups: [{ get_resource: CC_Security }]
                

    cc_BackendGroup:
        type: OS::Heat::ResourceGroup
        properties:
            count: 2
            resource_def:
                type: serverTemplate.yaml
                properties:
                    key_pair: { get_param: key_pair }
                    flavor: Cloud Computing
                    availability_zone: Cloud Computing 2017
                    image: ubuntu-16.04
                    name: {get_param : server}
                    network: {get_param: network}
                    #networks: [subnet: {get_resource: CC_Subnet}, network: {get_resource: CC_Network}, port: {get_resource: CC_Port}]
                    security_groups: [{ get_resource: CC_Security }]
          

    # This port is a separate resource used to assign the security groups
    # to the VM. Can also be used to attach a OS::Neutron::FloatingIP to the VM.
    # port:
    #     type: OS::Neutron::Port
    #     properties:
    #         network: { get_param: network }
    #         name:
    #             str_replace:
    #                 template: port-VM_NAME
    #                 params:
    #                     VM_NAME: { get_param: name }
    #         security_groups:
    #             get_param: security_groups
    
    # instance:
    #     type: OS::Nova::Server
    #     properties:
    #         name: { get_param: name }
    #         key_name: { get_param: key_pair }
    #         image: { get_param: image }
    #         flavor: { get_param: flavor }
    #         availability_zone: { get_param: zone }
    #         networks:
    #             - port: { get_resource: port }

outputs:
    # ip:
    #     description: Virtual IP address of instance
    #     value: { get_attr: [ instance, first_address ] }
    # port:
    #     description: Port ID of instance
    #     value: { get_resource: port }
    floating_ip:
        description: The floating_ip
        value: { get_attr: [CC_Floating_ip, floating_ip_address] }
